#!/usr/bin/env python3

import rospy

from husky_msgs.msg import HuskyStatus as Status
from sensor_msgs.msg import BatteryState
from std_msgs.msg import Header

NaN = float('nan')

def status_cb(data, node):
    node.status_callback(data)

class PowerStatusRelayNode:
    def __init__(self):
        rospy.init_node('husky_power_monitor')

    def start(self):
        self.mcu_sub = rospy.Subscriber('/status', Status, status_cb, self)
        self.battery_pub = rospy.Publisher('/bms/battery_status', BatteryState, queue_size=1)

    def status_callback(self, data):
        msg = BatteryState()

        # set up the message header
        msg.header = Header()
        msg.header.stamp = rospy.Time.now()

        # fill the rest of the pertinent payload
        msg.present = data.no_battery
        msg.voltage = data.battery_voltage
        msg.percentage = data.charge_estimate
        msg.current = NaN
        msg.power_supply_status = msg.POWER_SUPPLY_STATUS_DISCHARGING  # no built-in charging!
        msg.power_supply_health = msg.POWER_SUPPLY_HEALTH_UNKNOWN
        msg.power_supply_technology = msg.POWER_SUPPLY_TECHNOLOGY_UNKNOWN

        # assume a single cell
        msg.cell_voltage = [data.battery_voltage]
        msg.cell_temperature = [NaN]

        # arbitrary
        msg.location = 'internal'
        msg.serial_number = ''

        # measurements not supported by the Husky MCU
        msg.charge = NaN
        msg.capacity = NaN
        msg.design_capacity = NaN
        msg.temperature = NaN


        # publish the message
        self.battery_pub.publish(msg)

if __name__=='__main__':
    node = PowerStatusRelayNode()
    node.start()
    rospy.spin()
